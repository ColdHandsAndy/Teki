#version 460

#extension GL_GOOGLE_include_directive						:  enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct IndirectCommand 
{
    uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
};
struct DrawCallData
{
	uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;

	float   boundingSpherePosX;
	float   boundingSpherePosY;
	float   boundingSpherePosZ;
	float   boundingSphereRad;
};

#define COORDINATE_TRANSFORMATION_SET_INDEX 0
#include "coordinate_transformation_set.h"

layout(set = 1, binding = 0) buffer readonly Indices
{
	uint indices[];
};
layout(set = 1, binding = 1, std430) buffer readonly DrawCallDataBuffer
{
	DrawCallData drawCallData[];
};
layout(set = 1, binding = 2) buffer writeonly TargetDrawCommands
{
	IndirectCommand cmds[];
};
layout(set = 1, binding = 3) buffer TargetDrawCount
{
	uint targetDrawCount;
};
layout(set = 1, binding = 4) uniform sampler2D hierarchicalZ;
layout(set = 1, binding = 5) buffer DrawDataIndices
{
	uint drawDataIndices[];
};

layout(push_constant) uniform PushConstants
{
	uint commandCount;
	uint mipMax;
	float zNear;
} pushConstants;


void projectSphere(vec3 p, float r, float proj00, float proj11, out float bvWidth, out float bvHeight, out vec2 bvCenter)
{
    vec3 cr = p * r;
    float czr2 = p.z * p.z - r * r;

    float vx = sqrt(p.x * p.x + czr2);
    float minX = (vx * p.x - cr.z) / (vx * p.z + cr.x);
    float maxX = (vx * p.x + cr.z) / (vx * p.z - cr.x);

    float vy = sqrt(p.y * p.y + czr2);
    float minY = (vy * p.y - cr.z) / (vy * p.z + cr.y);
    float maxY = (vy * p.y + cr.z) / (vy * p.z - cr.y);

	float projMinX = minX * proj00 * 0.5 + 0.5;
	float projMaxX = maxX * proj00 * 0.5 + 0.5;
	float projMinY = minY * proj11 * 0.5 + 0.5;
	float projMaxY = maxY * proj11 * 0.5 + 0.5;
	
	bvWidth  = abs(projMaxX - projMinX);
	bvHeight = abs(projMaxY - projMinY);
	bvCenter = clamp(vec2(projMinX + bvWidth * 0.5, projMinY + bvHeight * 0.5), 0.0, 1.0);
}

bool testOcclusion(vec3 pos, float rad)
{
	vec3 viewPos = vec3(coordTransformData.viewFromWorld * vec4(pos, 1.0));
	float depth = coordTransformData.ndcFromView[2].z + coordTransformData.ndcFromView[3].z / (viewPos.z - rad);

	if (viewPos.z < rad + pushConstants.zNear)
		return false;
		
	float bvWidth;
	float bvHeight;
	vec2 sampleDepth;
	projectSphere(viewPos, rad, coordTransformData.ndcFromView[0].x, coordTransformData.ndcFromView[1].y, bvWidth, bvHeight, sampleDepth);
	
	uint n = clamp(uint(-log2(max(bvWidth, bvHeight))), 0, pushConstants.mipMax);
	
	uint levelHiZ = pushConstants.mipMax - n - 1;

	return textureLod(hierarchicalZ, sampleDepth, levelHiZ).x > depth;
}

void main()
{
	if (gl_GlobalInvocationID.x >= pushConstants.commandCount)
		return;
		
	uint drawIndex = indices[gl_GlobalInvocationID.x];

	DrawCallData data = drawCallData[drawIndex];
	
	bool occluded = testOcclusion(vec3(data.boundingSpherePosX, data.boundingSpherePosY, data.boundingSpherePosZ), data.boundingSphereRad);

	if (!occluded)
	{
		uint i = atomicAdd(targetDrawCount, 1);

		IndirectCommand cmd = IndirectCommand(data.indexCount, data.instanceCount, data.firstIndex, data.vertexOffset, data.firstInstance);
		cmds[i] = cmd;
		drawDataIndices[i] = drawIndex;
	}
}