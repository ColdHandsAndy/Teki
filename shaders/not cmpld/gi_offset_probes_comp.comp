#version 460

#extension GL_GOOGLE_include_directive						: enable

#include "gi_data.h"

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(push_constant) uniform PushConsts 
{
	vec3 probeDistancesInVoxels;
	float offsetNormalized;
} pushConstants;

layout(set = 0, binding = 0) uniform MD
{
	GIMetaData data;
} giMetaData;

layout(set = 1, binding = 0, r32ui) uniform readonly uimage3D BOM;
layout(set = 2, binding = 0, rgba8ui) uniform readonly uimage3D AlbedoNormalVoxelMap;
layout(set = 3, binding = 0, rgba8_snorm) uniform writeonly image3D ProbeOffsetImage;

void main()
{
	ProbeGridData gridData = giMetaData.data.cascades[0].gridData;
	
	ivec3 probeID = ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
	
	if (any(greaterThanEqual(probeID, ivec3(gridData.probeCountX, gridData.probeCountY, gridData.probeCountZ))))
		return;
		
	vec3 pOffset = vec3(0.0);
		
	const float offsetStepScale = sqrt(3);
	const uint BOMpackingX = 4;
	const uint BOMpackingY = 2;
	const uint BOMpackingZ = 4;
	vec3 coordBOM = pushConstants.probeDistancesInVoxels * (vec3(probeID) + vec3(0.5));
	ivec3 snappedCoordBOM = ivec3(coordBOM);
	if (bool(imageLoad(BOM, ivec3(coordBOM.x / BOMpackingX, coordBOM.y / BOMpackingY, coordBOM.z / BOMpackingZ)).x & (1 << ((snappedCoordBOM.x % BOMpackingX) * 4) << ((snappedCoordBOM.y % BOMpackingY) * 16) << ((snappedCoordBOM.z % BOMpackingZ)))))
	{
		vec3 albedo;
		vec3 normal;
		unpackMaterialVM(albedo, normal, imageLoad(AlbedoNormalVoxelMap, snappedCoordBOM));
		normal *= offsetStepScale;
		pOffset += normal;
		coordBOM += normal;
		snappedCoordBOM = ivec3(coordBOM);
		if (bool(imageLoad(BOM, ivec3(coordBOM.x / BOMpackingX, coordBOM.y / BOMpackingY, coordBOM.z / BOMpackingZ)).x & (1 << ((snappedCoordBOM.x % BOMpackingX) * 4) << ((snappedCoordBOM.y % BOMpackingY) * 16) << ((snappedCoordBOM.z % BOMpackingZ)))))
		{
			unpackMaterialVM(albedo, normal, imageLoad(AlbedoNormalVoxelMap, snappedCoordBOM));
			pOffset += normal * offsetStepScale;
		}
		pOffset *= pushConstants.offsetNormalized;
		pOffset = clamp(pOffset, vec3(-1.0), vec3(1.0));
	}
	imageStore(ProbeOffsetImage, probeID, vec4(pOffset, 0.0));
}