#version 460

#extension GL_GOOGLE_include_directive						: enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8     : enable

#include "misc.h"
#include "gi_data.h"

//Math
#define PI 3.141592653589
#define TWO_PI (2.0 * PI)
#define ONE_OVER_PI (1.0 / PI)
#define ONE_OVER_TWO_PI (1.0 / TWO_PI)
#define SQRT_2 1.41421356237309
#define ONE_OVER_SQRT_2 0.7071067811865475244

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant) uniform PushConsts 
{
	mat4 worldFromNDC;
	vec3 giSceneCenter;
	float pad;
	vec3 campos;
} pushConstants;

layout(set = 0, binding = 0, r11f_g11f_b10f) uniform writeonly image2D SpecularImage;
layout(set = 0, binding = 1, r16f) uniform writeonly image2D DistanceImage;
layout(set = 0, binding = 2, r32f) uniform readonly image2D Depth;
layout(set = 0, binding = 3, rg8) uniform readonly image2D Refdir;
layout(set = 1, binding = 0) uniform MD
{
	GIMetaData data;
} giMetaData;

layout(set = 2, binding = 0, r32ui) uniform readonly uimage3D ROMA[ROM_NUMBER];
layout(set = 2, binding = 1) uniform ViewMatricesROMA
{
	mat3x4 viewmats[ROM_NUMBER];
} viewmatsROMA;

layout(set = 3, binding = 0, rgba16ui) uniform readonly uimage3D EmissionMetRoughVoxelMap;
layout(set = 4, binding = 0, rgba8ui) uniform readonly uimage3D AlbedoNormalVoxelMap;

layout(set = 5, binding = 0) uniform sampler2D IrradianceProbes;
layout(set = 5, binding = 1) uniform sampler2D VisibilityProbes;

layout(set = 6, binding = 0) uniform sampler2D BRDFLUT;

vec3 getProbeLighting(ProbeGridData gridData, vec3 relPos, vec3 N, vec3 V, float roughness, float alpha, vec3 F0, vec3 albedo, float diffAO)
{
	relPos += (N * 0.2 + V * 0.8) * gridData.shadowBias;

	vec3 gridPos = relPos - gridData.relOriginProbePos;
	vec3 gridCoord = gridPos * vec3(gridData.probeInvDistX, gridData.probeInvDistY, gridData.probeInvDistZ);
	vec3 baseProbeCoord = floor(gridCoord);
	vec3 trilValues = gridCoord - baseProbeCoord;
	
	bool outOfBounds = false;
	vec3 gridCenter = (gridData.relOriginProbePos + gridData.relEndProbePos) * 0.5;
	vec3 gridExtents = (gridData.relEndProbePos - gridData.relOriginProbePos) * 0.5;
	for (int axis = 0; axis < 3; ++axis)
	{
		outOfBounds = abs(relPos[axis] - gridCenter[axis]) > gridExtents[axis];
	}

	vec3 diffLD = vec3(0.0);
	if (!outOfBounds)
		diffLD = sampleProbeVolume(gridData, N, gridPos, gridCoord, baseProbeCoord, trilValues, IrradianceProbes, VisibilityProbes);

	float NdotV = max(dot(N, V), 0.0);
	vec2 DFG = texture(BRDFLUT, vec2(NdotV, roughness)).xy;
	vec3 Fr = max(vec3(1.0 - alpha), F0) - F0;
    vec3 kS = F0 + Fr * pow(1.0 - NdotV, 5.0);
    vec3 FssEss = kS * DFG.x + DFG.y;
    float Ems = (1.0 - (DFG.x + DFG.y));
    vec3 Favg = F0 + (1.0 - F0) / 21.0;
    vec3 FmsEms = Ems * FssEss * Favg / (1.0 - Favg * Ems);
    vec3 kD = albedo * (1.0 - FssEss - FmsEms) * diffAO;

    return (FmsEms + kD) * diffLD;
}

void traceFreeROMA(out vec3 radiance, out float hitDist, ProbeGridData gridData, VoxelizationData voxelData, vec3 rayOriginOccupationLocal, vec3 traceDir, int indexROMA)
{
	mat3 viewmat = 
		mat3(vec3(viewmatsROMA.viewmats[indexROMA][0].x, viewmatsROMA.viewmats[indexROMA][1].x, viewmatsROMA.viewmats[indexROMA][2].x), 
			 vec3(viewmatsROMA.viewmats[indexROMA][0].y, viewmatsROMA.viewmats[indexROMA][1].y, viewmatsROMA.viewmats[indexROMA][2].y), 
			 vec3(viewmatsROMA.viewmats[indexROMA][0].z, viewmatsROMA.viewmats[indexROMA][1].z, viewmatsROMA.viewmats[indexROMA][2].z));
	vec3 rayOriginROM = vec3((viewmat * rayOriginOccupationLocal + vec3(1.0)) * 0.5 * voxelData.resolutionROM);
	vec3 traceStep = viewmat * traceDir;

	if (!(all(greaterThanEqual(ivec3(rayOriginROM), ivec3(0))) && all(lessThan(ivec3(rayOriginROM), ivec3(voxelData.resolutionROM)))))
	{
		radiance = vec3(0.0, 0.0, 0.0);
		hitDist = 0.0;
		return;
	}

	for (int i = 0; i < voxelData.resolutionROM; ++i)
	{
		int stripIndex = int(rayOriginROM.z / 32.0);
		uint rayStrip = imageLoad(ROMA[indexROMA], ivec3(ivec2(rayOriginROM.xy), stripIndex)).x;
		if (bool(rayStrip & (1 << (int(rayOriginROM.z) % 32))))
			break;
		rayOriginROM += traceStep;
		if (!(all(greaterThanEqual(ivec3(rayOriginROM), ivec3(0))) && all(lessThan(ivec3(rayOriginROM), ivec3(voxelData.resolutionROM)))))
		{
			radiance = vec3(0.0, 0.0, 0.0);
			hitDist = 0.0;
			return;
		}
	}

	ivec3 rayIntersecROM = ivec3(rayOriginROM);

	vec3 rayHitOccupationLocal = transpose(viewmat) * ((vec3(rayIntersecROM) + vec3(0.5)) / voxelData.resolutionROM * 2.0 - 1.0);

	ivec3 rayIntersecVM = ivec3(((rayHitOccupationLocal) * 0.5 + 0.5) * voxelData.resolutionVM);

	vec3 albedo;
	vec3 normal;
	unpackMaterialVM(albedo, normal, imageLoad(AlbedoNormalVoxelMap, rayIntersecVM));
	vec3 emission;
	float metalness;
	float roughness;
	unpackEmissionVM(emission, metalness, roughness, imageLoad(EmissionMetRoughVoxelMap, rayIntersecVM));

	vec3 F0 = mix(vec3(0.04), albedo, metalness);

	radiance = vec3(0.0);

	vec3 hitRelPos = rayHitOccupationLocal * voxelData.occupationHalfMeterSize;
	vec3 origRelPos = rayOriginOccupationLocal * voxelData.occupationHalfMeterSize;
	
	vec3 hoVec = origRelPos - hitRelPos;
	hitDist = length(hoVec);
	radiance += getProbeLighting(gridData, hitRelPos, normal, hoVec / hitDist, roughness, roughness * roughness, F0, albedo, 1.0);
	radiance += emission * (1.0 - metalness);
}

int getIndexROMA(int invocationIndex, bool positiveDirInvocation)
{
	const int[32] indexLookUp
		= int[32]
		(
			31, 23, 15, 7,   0, 8,  16, 24,
			30, 22, 14, 6,   1, 9,  17, 25,
			29, 21, 13, 5,   2, 10, 18, 26,
			28, 20, 12, 4,   3, 11, 19, 27
		);
	return positiveDirInvocation ? invocationIndex : indexLookUp[invocationIndex - 32];
}

void main()
{
	ProbeGridData gridData = giMetaData.data.cascades[0].gridData;
	VoxelizationData voxelData = giMetaData.data.cascades[0].voxelData;

	ivec2 screenCoords = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

	float depth = imageLoad(Depth, ivec2(screenCoords.x, screenCoords.y)).x;
	vec3 refdir = decodeOctohedralZeroToOne(imageLoad(Refdir, ivec2(screenCoords.x, screenCoords.y)).xy);

	vec2 screenUV = screenCoords * giMetaData.data.specData.invSpecImageRes;

	vec3 worldPos = getWorldPositionFromDepth(pushConstants.worldFromNDC, screenUV, depth);
	vec2 octohedral = clamp(encodeOctohedralZeroToOne(refdir), 0.0 + FLT_EPSILON, 1.0 - FLT_EPSILON);
	
	int indexROMA = int(int(octohedral.y * GI_ROM_INDEX_MULTIPLIER) * GI_ROM_INDEX_MULTIPLIER + int(octohedral.x * GI_ROM_INDEX_MULTIPLIER));
	bool positiveDir = indexROMA < 32;
	indexROMA = getIndexROMA(indexROMA, positiveDir);
	
	vec3 normal = normalize((normalize(pushConstants.campos - worldPos) + refdir));
	worldPos += normal * voxelData.offsetNormalScaleROM;
	
	vec3 rayOriginOccupationLocal = (worldPos - pushConstants.giSceneCenter) * voxelData.invOccupationHalfMeterSize;
	
	vec3 specular;
	float hitDist;
	traceFreeROMA(specular, hitDist, gridData, voxelData, rayOriginOccupationLocal, refdir, indexROMA);

	imageStore(DistanceImage, screenCoords, vec4(hitDist, vec3(0.0)));
	imageStore(SpecularImage, screenCoords, vec4(vec3(specular), 0.0));
}